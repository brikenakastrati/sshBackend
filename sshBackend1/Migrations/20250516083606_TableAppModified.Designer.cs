// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sshBackend1.Data;

#nullable disable

namespace sshBackend1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516083606_TableAppModified")]
    partial class TableAppModified
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sshBackend1.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("sshBackend1.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("sshBackend1.Models.Florist", b =>
                {
                    b.Property<int>("FloristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloristId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AgencyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FloristId");

                    b.HasIndex("PartnerStatusId");

                    b.ToTable("Florists");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangement", b =>
                {
                    b.Property<int>("FlowerArrangementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowerArrangementId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FloristId")
                        .HasColumnType("int");

                    b.Property<int>("FlowerArrangementTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FlowerArrangementId");

                    b.HasIndex("FloristId");

                    b.HasIndex("FlowerArrangementTypeId");

                    b.ToTable("FlowerArrangements");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangementOrder", b =>
                {
                    b.Property<int>("FlowerArrangementOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowerArrangementOrderId"));

                    b.Property<double>("AgencyFee")
                        .HasColumnType("float");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("FlowerArrangementOrderId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("FlowerArrangementOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangementType", b =>
                {
                    b.Property<int>("FlowerArrangementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlowerArrangementTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlowerArrangementTypeId");

                    b.ToTable("FlowerArrangementTypes");
                });

            modelBuilder.Entity("sshBackend1.Models.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestSecondName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuestStatus")
                        .HasColumnType("int");

                    b.Property<string>("GuestSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.HasKey("GuestId");

                    b.HasIndex("EventId");

                    b.HasIndex("TableId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("sshBackend1.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<int?>("CateringId")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("MenuTypeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("sshBackend1.Models.MenuOrder", b =>
                {
                    b.Property<int>("MenuOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuOrderId"));

                    b.Property<string>("AdditionalRequests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AgencyFee")
                        .HasColumnType("float");

                    b.Property<string>("Allergents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("IngreedientsForbiddenByReligion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("MenuOrderId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("MenuOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.MenuType", b =>
                {
                    b.Property<int>("MenuTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MenuTypeId");

                    b.ToTable("MenuTypes");
                });

            modelBuilder.Entity("sshBackend1.Models.MusicProvider", b =>
                {
                    b.Property<int>("MusicProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicProviderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AgencyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BaseHourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PerformerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MusicProviderId");

                    b.HasIndex("PartnerStatusId");

                    b.HasIndex("PerformerTypeId");

                    b.ToTable("MusicProviders");
                });

            modelBuilder.Entity("sshBackend1.Models.MusicProviderOrder", b =>
                {
                    b.Property<int>("MusicProviderOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicProviderOrderId"));

                    b.Property<double>("AgencyFee")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("MusicProviderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MusicProviderOrderId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("MusicProviderOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("sshBackend1.Models.PartnerStatus", b =>
                {
                    b.Property<int>("PartnerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartnerStatusId");

                    b.ToTable("PartnerStatuses");
                });

            modelBuilder.Entity("sshBackend1.Models.Pastry", b =>
                {
                    b.Property<int>("PastryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PastryId"));

                    b.Property<string>("PastryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PastryTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("PastryId");

                    b.HasIndex("PastryTypeId");

                    b.HasIndex("ShopId");

                    b.ToTable("Pastries");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryOrder", b =>
                {
                    b.Property<int>("PastryOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PastryOrderId"));

                    b.Property<double>("AgencyFee")
                        .HasColumnType("float");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("PastryOrderId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("PastryOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryShop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.HasIndex("PartnerStatusId");

                    b.ToTable("PastryShops");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryType", b =>
                {
                    b.Property<int>("PastryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PastryTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PastryTypeId");

                    b.ToTable("PastryTypes");
                });

            modelBuilder.Entity("sshBackend1.Models.PerformerType", b =>
                {
                    b.Property<int>("PerformerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformerTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PerformerTypeId");

                    b.ToTable("PerformerTypes");
                });

            modelBuilder.Entity("sshBackend1.Models.PlaylistItem", b =>
                {
                    b.Property<int>("PlaylistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistItemId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MusicProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaylistItemId");

                    b.HasIndex("MusicProviderId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("sshBackend1.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantStatusId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId");

                    b.HasIndex("RestaurantStatusId");

                    b.HasIndex("VenueId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("sshBackend1.Models.RestaurantStatus", b =>
                {
                    b.Property<int>("RestaurantStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantStatusId");

                    b.ToTable("RestaurantStatuses");
                });

            modelBuilder.Entity("sshBackend1.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("sshBackend1.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int?>("TableStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("TableId");

                    b.HasIndex("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("sshBackend1.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VenueProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueTypeId")
                        .HasColumnType("int");

                    b.HasKey("VenueId");

                    b.HasIndex("VenueProviderId");

                    b.HasIndex("VenueTypeId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueOrder", b =>
                {
                    b.Property<int>("VenueOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueOrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AgencyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("VenueOrderId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("VenueId");

                    b.ToTable("VenueOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueProvider", b =>
                {
                    b.Property<int>("VenueProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueProviderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AgencyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartnerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueProviderId");

                    b.HasIndex("PartnerStatusId");

                    b.ToTable("VenueProviders");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueType", b =>
                {
                    b.Property<int>("VenueTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueTypeId");

                    b.ToTable("VenueTypes");
                });

            modelBuilder.Entity("sshBackend1.Models.Florist", b =>
                {
                    b.HasOne("sshBackend1.Models.PartnerStatus", "PartnerStatus")
                        .WithMany("Florists")
                        .HasForeignKey("PartnerStatusId");

                    b.Navigation("PartnerStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangement", b =>
                {
                    b.HasOne("sshBackend1.Models.Florist", "Florist")
                        .WithMany("FlowerArrangements")
                        .HasForeignKey("FloristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sshBackend1.Models.FlowerArrangementType", "FlowerArrangementType")
                        .WithMany("FlowerArrangements")
                        .HasForeignKey("FlowerArrangementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Florist");

                    b.Navigation("FlowerArrangementType");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangementOrder", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("FlowerArrangementOrders")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.OrderStatus", "OrderStatus")
                        .WithMany("FlowerArrangementOrders")
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Event");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.Guest", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.Table", "Table")
                        .WithMany("Guests")
                        .HasForeignKey("TableId");

                    b.Navigation("Event");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("sshBackend1.Models.Menu", b =>
                {
                    b.HasOne("sshBackend1.Models.MenuType", "MenuType")
                        .WithMany("Menus")
                        .HasForeignKey("MenuTypeId");

                    b.HasOne("sshBackend1.Models.Restaurant", null)
                        .WithMany("Menu")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("MenuType");
                });

            modelBuilder.Entity("sshBackend1.Models.MenuOrder", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("MenuOrders")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.OrderStatus", "OrderStatus")
                        .WithMany("MenuOrders")
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Event");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.MusicProvider", b =>
                {
                    b.HasOne("sshBackend1.Models.PartnerStatus", "PartnerStatus")
                        .WithMany("MusicProviders")
                        .HasForeignKey("PartnerStatusId");

                    b.HasOne("sshBackend1.Models.PerformerType", "PerformerType")
                        .WithMany("MusicProviders")
                        .HasForeignKey("PerformerTypeId");

                    b.Navigation("PartnerStatus");

                    b.Navigation("PerformerType");
                });

            modelBuilder.Entity("sshBackend1.Models.MusicProviderOrder", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("MusicProviderOrders")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.OrderStatus", "OrderStatus")
                        .WithMany("MusicProviderOrders")
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Event");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.Pastry", b =>
                {
                    b.HasOne("sshBackend1.Models.PastryType", "PastryType")
                        .WithMany("Pastries")
                        .HasForeignKey("PastryTypeId");

                    b.HasOne("sshBackend1.Models.PastryShop", "Shop")
                        .WithMany("Pastries")
                        .HasForeignKey("ShopId");

                    b.Navigation("PastryType");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryOrder", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("PastryOrders")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.OrderStatus", "OrderStatus")
                        .WithMany("PastryOrders")
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Event");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryShop", b =>
                {
                    b.HasOne("sshBackend1.Models.PartnerStatus", "PartnerStatus")
                        .WithMany("PastryShops")
                        .HasForeignKey("PartnerStatusId");

                    b.Navigation("PartnerStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.PlaylistItem", b =>
                {
                    b.HasOne("sshBackend1.Models.MusicProvider", "MusicProvider")
                        .WithMany("PlaylistItems")
                        .HasForeignKey("MusicProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicProvider");
                });

            modelBuilder.Entity("sshBackend1.Models.Restaurant", b =>
                {
                    b.HasOne("sshBackend1.Models.RestaurantStatus", "RestaurantStatus")
                        .WithMany()
                        .HasForeignKey("RestaurantStatusId");

                    b.HasOne("sshBackend1.Models.Venue", "Venue")
                        .WithMany("Restaurant")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantStatus");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("sshBackend1.Models.Table", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.Venue", null)
                        .WithMany("Tables")
                        .HasForeignKey("VenueId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("sshBackend1.Models.Venue", b =>
                {
                    b.HasOne("sshBackend1.Models.VenueProvider", "VenueProvider")
                        .WithMany("Venues")
                        .HasForeignKey("VenueProviderId");

                    b.HasOne("sshBackend1.Models.VenueType", "VenueType")
                        .WithMany("Venues")
                        .HasForeignKey("VenueTypeId");

                    b.Navigation("VenueProvider");

                    b.Navigation("VenueType");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueOrder", b =>
                {
                    b.HasOne("sshBackend1.Models.Event", "Event")
                        .WithMany("VenueOrders")
                        .HasForeignKey("EventId");

                    b.HasOne("sshBackend1.Models.OrderStatus", "OrderStatus")
                        .WithMany("VenueOrders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("sshBackend1.Models.Venue", "Venue")
                        .WithMany("VenueOrders")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("OrderStatus");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueProvider", b =>
                {
                    b.HasOne("sshBackend1.Models.PartnerStatus", "PartnerStatus")
                        .WithMany("VenueProviders")
                        .HasForeignKey("PartnerStatusId");

                    b.Navigation("PartnerStatus");
                });

            modelBuilder.Entity("sshBackend1.Models.Event", b =>
                {
                    b.Navigation("FlowerArrangementOrders");

                    b.Navigation("Guests");

                    b.Navigation("MenuOrders");

                    b.Navigation("MusicProviderOrders");

                    b.Navigation("PastryOrders");

                    b.Navigation("VenueOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.Florist", b =>
                {
                    b.Navigation("FlowerArrangements");
                });

            modelBuilder.Entity("sshBackend1.Models.FlowerArrangementType", b =>
                {
                    b.Navigation("FlowerArrangements");
                });

            modelBuilder.Entity("sshBackend1.Models.MenuType", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("sshBackend1.Models.MusicProvider", b =>
                {
                    b.Navigation("PlaylistItems");
                });

            modelBuilder.Entity("sshBackend1.Models.OrderStatus", b =>
                {
                    b.Navigation("FlowerArrangementOrders");

                    b.Navigation("MenuOrders");

                    b.Navigation("MusicProviderOrders");

                    b.Navigation("PastryOrders");

                    b.Navigation("VenueOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.PartnerStatus", b =>
                {
                    b.Navigation("Florists");

                    b.Navigation("MusicProviders");

                    b.Navigation("PastryShops");

                    b.Navigation("VenueProviders");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryShop", b =>
                {
                    b.Navigation("Pastries");
                });

            modelBuilder.Entity("sshBackend1.Models.PastryType", b =>
                {
                    b.Navigation("Pastries");
                });

            modelBuilder.Entity("sshBackend1.Models.PerformerType", b =>
                {
                    b.Navigation("MusicProviders");
                });

            modelBuilder.Entity("sshBackend1.Models.Restaurant", b =>
                {
                    b.Navigation("Menu");
                });

            modelBuilder.Entity("sshBackend1.Models.Table", b =>
                {
                    b.Navigation("Guests");
                });

            modelBuilder.Entity("sshBackend1.Models.Venue", b =>
                {
                    b.Navigation("Restaurant");

                    b.Navigation("Tables");

                    b.Navigation("VenueOrders");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueProvider", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("sshBackend1.Models.VenueType", b =>
                {
                    b.Navigation("Venues");
                });
#pragma warning restore 612, 618
        }
    }
}
